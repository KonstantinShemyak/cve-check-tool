/*
 * cve-string.h - string management
 *
 * Copyright (C) 2015 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

#pragma once

#define _GNU_SOURCE

#include <stdbool.h>
#include <stdlib.h>

/**
 * Safely represent and store a buffer as a string
 */
typedef struct cve_string_t {
        char *str;      /**<Buffer holding a NUL-terminated string */
        int len;        /**<Current length of the string */
} cve_string;

/**
 * Construct a new string using printf style syntax
 *
 * @param format Printf-style format string
 * @param ... Variable arguments
 *
 * @return a new cve_string if allocation succeeded, otherwise NULL
 */ 
cve_string *cve_string_dup_printf(const char *format, ...)
__attribute__ ((format (printf, 1, 2)));


/**
 * Duplicate a string into a new NUL-terminated cve_string
 *
 * @param str Pointer to a string
 * @return a new cve_string if allocation succeeded, otherwise NULL
 */
cve_string *cve_string_dup(const char *str);

/**
 * Free an existing string and its contents
 *
 * @param str Pointer to an existing string
 */
static inline void cve_string_free(cve_string *str)
{
        if (!str) {
                return;
        }
        if (str->str) {
                free(str->str);
        }
        free(str);
}

/**
 * Append the contents of 'append' into the given cve_string
 *
 * @param str Pointer to a valid cve_string
 * @param append Text to append into the cve_string
 *
 * @return a boolean value indicating success
 */
bool cve_string_cat(cve_string *str, const char *append);
