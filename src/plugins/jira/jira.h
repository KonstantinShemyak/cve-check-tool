/*
 * jira.h - cve-check-tool
 *
 * Copyright (C) 2015 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

#define _GNU_SOURCE

#pragma once

#include <glib.h>
#include <stdbool.h>

#include "cve-string.h"
#include "template.h"
#include "util.h"

/**
 * A Jira issue
 */
struct jira_issue_t {
    gchar *key;     /**<Reader friendly key value of issue */
    gchar *status;  /**<Reader friendly name of issue */
    gchar *summary; /**<Summary value of issue */
};

/**
 * Adds a new Jira issue with the given json string
 *
 * @param json The json string containing the
 * @return true if successful
 */
bool add_new_jira_issue(const gchar *jira_json);

/**
 * Builds the json string to use for inserting a new bug in Jira
 *
 * @param summary
 * @param as_template
 * @param json
 * @return true if successful
 */
bool build_new_jira_issue(const gchar *summary, bool as_template, gchar **jira_json);

/**
 * Searches Jira server for CVE related-issues
 *
 * @param json
 * @return true if successful
 */
bool build_search_jira_issues(gchar **jira_json);

/**
 * Searches Jira server for CVE related-issues
 *
 * @param json
 * @return true if successful
 */
bool check_jira_response(const gchar *jira_json);

/**
 * Frees internal plugin resources
 *
 * @param json
 * @return true if successful
 */
void destroy_jira_plugin(void);

/**
 * Checks the response from the Jira server for any type of error messages
 *
 * @param json
 * @return true if successful
 */
int get_jira_issues_count(const GSList *jira_issues);

/**
 * Initializes the plugin.  Run this before anything else. You
 * either pass in an already initialized config key_file or
 * set it NULL and provide a path to a configuration instead.
 *
 * @param config An initialized key_file or NULL.
 * @param path Path to this tool's Jira configuration/ini file
 * @return true if successful
 */
bool init_jira_plugin(GKeyFile *config, const gchar *path);

/**
 * Checks if Jira server is minimally responsive
 *
 * @return true if successful
 */
bool is_jira_alive(void);

/**
 * Returns total number of issues found in given match list
 *
 * @param jira_issues
 * @return Total number of matched Jira issues
 */
bool load_new_jira_issue_file(const gchar *path, const gchar *summary,  gchar **jira_json);

/**
 * Parses the Jira configuration file.  This needs to happen first.
 *
 * @param path
 * @return true if successful
 */
bool parse_jira_issues(const gchar *jira_issues_json, GSList **jira_issues);

/**
 * Parses and filters json containing Jira issues
 *
 * @param jira_issues_json
 * @param jira_issues
 * @return true if successful
 */
bool save(const gchar *something, const gchar *path);

/**
 * A helper function that saves anything to a file
 *
 * @param something
 * @param path
 * @return true if successful
 */
bool save_jira_issues_csv(const GSList *jira_issues, const gchar *path);

/**
 * Saves matched Jira issues to file in CSV format
 *
 * @param json
 * @param path
 * @return true if successful
 */
bool save_jira_issues_xml(const GSList *jira_issues, const gchar *path);

/**
 * Saves matched Jira issues to file in XML format
 *
 * @param jira_issues
 * @param path
 * @return true if successful
 */
bool search_jira_issues(const gchar *jira_json, gchar **jira_issues_json);

/**
 * Searches Jira server based upon Jira-Search-Issues criteria in cfg file
 *
 * @param jira_issues Matched Jira issue list
 * @return
 */
void show_jira_issues(const GSList *jira_issues);
