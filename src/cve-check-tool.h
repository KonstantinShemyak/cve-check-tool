/*
 * cve-check-tool.h
 *
 * Copyright (C) 2015 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

#pragma once

#include <stdbool.h>
#include <glib.h>

/**
 * Maps vulnerabilities into a consumable format
 */
struct vulnerability_t {
        gchar *product; /**<CPE product field */
        gchar *vendor;  /**<CPE vendor field */
        gchar *version; /**<Matching CPE version, if any */
};

/**
 * Simple representation of a CVE
 */
struct cve_entry_t {
        gchar *id;              /**<CVE ID */
        gchar *summary;         /**<Description of CVE */
        GList *uris;            /**<Set of online links, usually patches or ML reports */
        gchar *score;           /**<CVSS score of this CVE */
        gchar *vector;          /**<CVSS access vector of this CVE */
        int64_t modified;       /**<Last modified timestamp */
};

/**
 * Representation of a source package
 */
struct source_package_t {
        void *name;             /**<Our name for the package */
        void *version;          /**<Our current version */
        gchar *path;            /**<Filesystem path of source path */
        int release;            /**<Highest (available) release number */
        GList *issues;          /**<List of applicable (non-patched) CVEs */
        GList *patched;         /**<List of *patched* applicable CVEs */
        bool xml;               /**<Whether this is libxml's memory */
        void* extra;            /**<Extra storage for each implementation */
};

/**
 * Function to yield all applicable sources.
 */
typedef void (*cve_locate_sources)(const char*);

/**
 * Determine if a package has already patched a vulnerability
 */
typedef bool (*cve_is_patched)(struct source_package_t*, char *id);

/**
 * Determine if an issue should be ignored due to distribution policy
 */
typedef bool (*cve_is_ignored)(struct source_package_t*, char *id);

/**
 * Function to examine a source spec.
 */
typedef struct source_package_t* (*cve_examine_source)(const char *path);

/**
 * Instance tracking
 */
typedef struct CveCheckTool {
    cve_locate_sources locate;          /**<Locate relevant source files */
    cve_is_patched is_patched;          /**<Determine if package is patched */
    cve_is_patched is_ignored;          /**<Determine if an issue should be ignored */
    cve_examine_source examine;         /**<Examine a source file */
    int64_t modified;                   /**<Upper limit of CVE's to monitor, or -1 */
    bool hide_patched;                  /**<Whether to hide patches or not */
    bool show_unaffected;               /**<Whether to show unaffected items or not */
    GHashTable *db;                     /**<Mapping of packages */
    GHashTable *cdb;                    /**<Mapping of CVEs */
    GHashTable *bdb;                    /**<Mapping of bugs */
    GKeyFile *config;                   /**<Current configuration (if any) */
} CveCheckTool;

/**
 * Exploitable only via local/physical access
 */
#define ACCESS_VECTOR_LOCAL     "LOCAL"

/**
 * Locally exploitable via network (collision or local subnet)
 */
#define ACCESS_VECTOR_ADJACENT  "ADJACENT_NETWORK"

/**
 * Remotely exploitable
 */
#define ACCESS_VECTOR_NETWORK   "NETWORK"

/**
 * Distro implementations need to add packages to the interest list
 * before we will check them for CVEs. This will actually call back to
 * the self->examine function, and add the parsed package into the
 * current list.
 *
 * @param path Full legal path to the source package
 */
void cve_add_package(const char *path);
